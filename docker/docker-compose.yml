## Blue/Green 배포 스크립트

services:
  spring-blue:
    image: spring-blue-image
    container_name: spring-blue-container
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SPRING_REDIS_HOST=redis-container
      - SPRING_REDIS_PORT=6379
    ports:
      - "8081:8080"
    networks:
      - shared-network

  spring-green:
    image: spring-green-image
    container_name: spring-green-container
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SPRING_REDIS_HOST=redis-container
      - SPRING_REDIS_PORT=6379
    ports:
      - "8082:8080"
    networks:
      - shared-network

  nginx:
    build:
      context: .
      dockerfile: Dockerfile-Nginx
    image: nginx:latest
    restart: unless-stopped
    container_name: nginx-proxy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - shared-network

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  redis:
    image: redis:latest
    container_name: redis-container
    ports:
      - "6379:6379"
    networks:
      - shared-network
    volumes:
      - redis-data:/data # 데이터 지속성 설정

networks:
  shared-network:
    name: pricewagon-network  # 고정된 네트워크 이름을 지정
    driver: bridge
    external: true  # 이미 존재하는 네트워크를 재사용하도록 설정

volumes:
  redis-data: